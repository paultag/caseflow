require 'test_helper'
require './app/controllers/web_controller'

class WebControllerTest < ActiveSupport::TestCase
  test 'empty remarks produces empty remarks' do
    remarks_test('', ['', ''])
  end

  test 'short one line remark does not get split' do
    remarks_input = 'blah blah blah'
    remarks_test(remarks_input, [remarks_input, ''])
  end

  test 'more than one line remark gets split' do
    remarks_test(
      "line 1\nline 2\nline 3",
      ['line 1 (continued)', "\nRemarks Continued:\nline 2\nline 3"]
    )
  end

  test 'long one line remark gets split' do
    remarks_input
    remarks_test(remarks_input, ["#{remarks_input[0..694]} (continued)", "\nRemarks Continued:\n#{remarks_input[695..(remarks_input.length)]}"])
  end

  test 'remark with long first line gets split correctly' do
    remarks_inputnline 1\nline 2"
    remarks_test(remarks_input, ["#{remarks_input[0..694]} (continued)", "\nRemarks Continued:\n#{remarks_input[695..(remarks_input.length)]}"])
  end

  test 'short xA field does not get carried over to remarks page 2' do
    xa_test('hello', 'hello', '')
  end

  test 'long xA field has text rolled over' do
    field = '1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890'
    expected_field = "#{field[0..158]} (see continued remarks page 2)"
    expected_rollover = "\nxA Continued:\n#{field[159..(field.length)]}"
    xa_test(field, expected_field, expected_rollover)
  end

  # --- Helper Methods ---
  def xa_test(field_input, expected_field, expected_rollover)
    field, rollover = WebController.field_xa_rollover(field_input, 'xA')
    assert_equal(expected_field, field, 'The field value does not match expectations')
    assert_equal(expected_rollover, rollover, 'The rollover value does not match expectations')
  end

  def remarks_test(remarks_input, expected_remarks)
    remarks = WebController.remarks_field_rollover(remarks_input)
    assert_equal(expected_remarks[0], remarks[0], 'Remarks block #1 does not match expectations')
    assert_equal(expected_remarks[1], remarks[1], 'Remarks block #2 does not match expectations')
  end

end