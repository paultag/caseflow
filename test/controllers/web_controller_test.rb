require 'test_helper'
require './app/controllers/web_controller'

class WebControllerTest < ActiveSupport::TestCase

  # --- Constants ---
  CONTINUED = ' (continued)'
  REMARKS_CONTINUED = "\n\nRemarks Continued:\n"
  SEE_PAGE_2 = ' (see continued remarks page 2)'
  XA_ROLLOVER_CAP = 159
  REMARKS_ROLLOVER_CAP = 695

  # --- Tests ---
  test 'empty remarks produces empty remarks' do
    remarks_test('', ['', ''])
  end

  test 'short one line remark does not get split' do
    remarks_input = 'blah blah blah'
    remarks_test(remarks_input, [remarks_input, ''])
  end

  test 'more than one line remark gets split' do
    remarks_test(
      "line 1\nline 2\nline 3",
      ['line 1 (continued)', "#{REMARKS_CONTINUED}line 2\nline 3"]
    )
  end

  test 'long one line remark gets split' do
    remarks_input
    remarks_test(remarks_input, ["#{remarks_input[0..(REMARKS_ROLLOVER_CAP-1)]} (continued)", "#{REMARKS_CONTINUED}#{remarks_input[REMARKS_ROLLOVER_CAP..(remarks_input.length)]}"])
  end

  test 'remark with long first line gets split correctly' do
    remarks_inputnline 1\nline 2"
    remarks_test(remarks_input, ["#{remarks_input[0..(REMARKS_ROLLOVER_CAP-1)]} (continued)", "#{REMARKS_CONTINUED}#{remarks_input[REMARKS_ROLLOVER_CAP..(remarks_input.length)]}"])
  end

  test 'short xA field does not get carried over to remarks page 2' do
    xa_test('hello', 'hello', '')
  end

  test 'long xA field has text rolled over' do
    field = '1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890'
    expected_field = "#{field[0..(XA_ROLLOVER_CAP-1)]}#{SEE_PAGE_2}"
    expected_rollover = "\n\nxA Continued:\n#{field[(XA_ROLLOVER_CAP)..(field.length)]}"
    xa_test(field, expected_field, expected_rollover)
  end

  test 'all fields rollover to page 2 cleanly' do
    fields_input = {
      '5A_SERVICE_CONNECTION_FOR' => '1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890',
      '6A_INCREASED_RATING_FOR' => '1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890',
      '7A_OTHER' => '1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890',
nline 1\nline 2"
    }
    fields = WebController.field_rollover(fields_input)

    expected_5a_rollover = WebController.field_xa_rollover(fields_input['5A_SERVICE_CONNECTION_FOR'], '5A')[1]
    expected_6a_rollover = WebController.field_xa_rollover(fields_input['6A_INCREASED_RATING_FOR'], '6A')[1]
    expected_7a_rollover = WebController.field_xa_rollover(fields_input['7A_OTHER'], '7A')[1]
    expected_remarks_rollover = WebController.remarks_field_rollover(fields_input['14_REMARKS_INITIAL'])[1]

    expected_rollover = [expected_5a_rollover, expected_6a_rollover, expected_7a_rollover, expected_remarks_rollover].join
    assert_equal(expected_rollover, fields['14_REMARKS_CONTINUED'], 'Fields 5A, 6A, 7A, and Remarks do not rollover together cleanly. This may or may not be just the combination of the fields or one of the rollover routines failing individually')
  end

  # --- Helper Methods ---
  def xa_test(field_input, expected_field, expected_rollover)
    field, rollover = WebController.field_xa_rollover(field_input, 'xA')
    assert_equal(expected_field, field, 'The field value does not match expectations')
    assert_equal(expected_rollover, rollover, 'The rollover value does not match expectations')
  end

  def remarks_test(remarks_input, expected_remarks)
    remarks = WebController.remarks_field_rollover(remarks_input)
    assert_equal(expected_remarks[0], remarks[0], 'Remarks block #1 does not match expectations')
    assert_equal(expected_remarks[1], remarks[1], 'Remarks block #2 does not match expectations')
  end

end